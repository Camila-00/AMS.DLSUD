<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="./assets/DLSUDLOGO.png" type="image/x-icon">
    <title>AMS â€“ Archives</title>
    <link rel="stylesheet" href="/css/indexarchive.css">
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap">

</head>
<body>
    <!-- Navbar -->
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="indexcustodianhomepage.ejs">
                <img src="./assets/ams_logo.png" alt="ICTC Asset Management Logo" height="50" class="d-inline-block align-top" style="margin-right: 10px;">

            </a>

            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <span id="welcomeText">Welcome, </span><span id="authUsers">Admin</span>
                    </a>
                    <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                        <a class="dropdown-item" href="indexwelcomepage.ejs">Logout</a>
                    </div>
                </li>
            </ul>
        </div>
    </nav>

    <!-- Sidebar -->
    <div class="sidebar">
        <a href="#" onclick="showRoomContent('201')">Room 201</a>
        <a href="#" onclick="showRoomContent('202')">Room 202</a>
        <a href="#" class="borrower-link" onclick="showBorrowerContent()">Borrower</a>
        <a href="#" class="borrower-link" onclick="showReportContent()">Asset Status Condition</a>
    </div>

    <!-- Asset content ROOM 201 -->
    <div class="content" id="asset-content201">
        <h1>ICTC 201 Asset Overview</h1>
        <input type="text" id="searchInput201" class="filter-input" placeholder="Filter">
        <button class="print-table">Print Table</button>

        <table class="asset-table">
            <thead>
                <tr>
                    <th>Room</th>
                    <th>Location</th>
                    <th>Category</th>
                    <th>Item Description</th>
                    <th>Serial Number</th>
                    <th>Unit Cost</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="data-table201"></tbody>
        </table>

        <!-- Pagination HTML -->
        <div class="pagination" id="pagination201"></div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal201" tabindex="-1" aria-labelledby="exampleModalLabel201" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Row Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <!-- Row details will be populated here -->
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
        </div>
    </div>

    <!-- Asset content ROOM 202 -->
    <div class="content" id="asset-content202">
        <h1>ICTC 202 Asset Overview</h1>
        <input type="text" id="searchInput202" class="filter-input" placeholder="Filter">
        <button class="print-table">Print Table</button>

        <table class="asset-table">
            <thead>
                <tr>
                    <th>Room</th>
                    <th>Location</th>
                    <th>Category</th>
                    <th>Item Description</th>
                    <th>Serial Number</th>
                    <th>Unit Cost</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="data-table202"></tbody>
        </table>

        <!-- Pagination HTML -->
        <div class="pagination" id="pagination202"></div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="exampleModal202" tabindex="-1" aria-labelledby="exampleModalLabel202" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Row Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <!-- Row details will be populated here -->
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
        </div>
    </div>


    <div class="content" id="borrower-content" style="display: none;">
        <h1>Borrower List</h1>
        <!-- Borrow Download button -->
        <button onclick="downloadBorrowerData()" id="borrowprint">Print Table</button>
        <table class="asset-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>User Number</th>
                    <th>Item Description</th>
                    <th>Barcode</th>
                    <th>Borrow Date</th>
                    <th>Return Date</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody id="borrower-data-table"></tbody>
        </table>
    </div>
    
    <div class="content" id="report-content">
        <h1>Asset Status Report</h1>
        <button onclick="downloadAssetStatusData()" id="printButtonAssetStatus">Print Table</button>
        <table class="report-table">
            <thead>
                <tr>
                    <th>Location</th>
                    <th>Barcode</th>
                    <th>Item Description</th>
                    <th>Issue</th>
                </tr>
            </thead>
            <tbody id="report-data-table">
                <!-- Database content will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

    <script>
        let currentRoom = '201'; // Ensure currentRoom is defined globally
        const itemsPerPage = 10; // Define itemsPerPage globally
    

        function showRoomContent(room) {
            hideAllTabs(); // Hide all other tabs
            document.getElementById('asset-content' + room).style.display = 'block';
            currentRoom = room;
            fetchData(1, itemsPerPage, '', room); // Fetch data for the selected room
        }
    
        function hideAllTabs() {
            document.getElementById('asset-content201').style.display = 'none';
            document.getElementById('asset-content202').style.display = 'none';
             document.getElementById('borrower-content').style.display = 'none'; // Hide borrower tab
    document.getElementById('report-content').style.display = 'none'; // Hide report tab
            
            // Add similar lines for other tabs if exists
        }
    
        function populatePage(assetsList) {
            const tableBody = document.getElementById('data-table' + currentRoom);
            tableBody.innerHTML = ''; // Clear existing data
    
            assetsList.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.room}</td>
                    <td>${item.location}</td>
                    <td>${item.category}</td>
                    <td>${item.item_description}</td>
                    <td>${item.serial_number}</td>
                    <td>${item.unit_cost}</td>
                    <td>${item.asset_status}</td>
                `;
     // Determine whether to hide the row based on isDeleted
     const shouldHide = isReportHidden(item.isDeleted);
        row.style.display = shouldHide ? 'none' : 'table-row'; // Hide if report is hidden


                // Add click event listener to the row
                row.addEventListener('click', function () {
                    showModalWithData(row);
                    showReportContent();
                    showBorrowerContent();
                });
    
                tableBody.appendChild(row);
            });

            function isReportHidden(isDeleted) { // FOR ASSET CONDITION
    return !isDeleted; 
}

        }
    
        function createPagination(totalItems, itemsPerPage, currentPage, room) {
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const pagination = document.getElementById('pagination' + room);
            pagination.innerHTML = '';
    
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.textContent = i;
                if (i === currentPage) {
                    pageLink.classList.add('active');
                }
                pageLink.addEventListener('click', function () {
                    fetchData(i, itemsPerPage, '', room);
                });
                pagination.appendChild(pageLink);
            }
        }
    
        async function fetchData(pageNumber, itemsPerPage, filterText = '', room) {
    try {
        const response = await fetch('/data/dBoard' + room + '?isDeleted=true'); // Modified endpoint to fetch only deleted items
        if (!response.ok) {
            throw new Error(`Failed to fetch data. Status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Fetched data:', data);

        // Filter data based on input text
        const filteredData = data.filter(item => {
            const searchableFields = ['room', 'location', 'category', 'item_description', 'serial_number', 'unit_cost', 'asset_status'];
            const isMatch = searchableFields.some(field => {
                const fieldValue = item[field];
                if (typeof fieldValue === 'string') {
                    const lowercaseValue = fieldValue.toLowerCase();
                    return lowercaseValue.includes(filterText.toLowerCase().trim());
                }
                return false;
            });
            return isMatch;
        });

        const startIndex = (pageNumber - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, filteredData.length);
        const currentPageData = filteredData.slice(startIndex, endIndex);

        populatePage(currentPageData);
        createPagination(filteredData.length, itemsPerPage, pageNumber, room);

    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

async function showAuthUsers() {
        let usersName = document.getElementById("authUsers");
        usersName.innerText = await localStorage.getItem('lastName');
    }

    
        document.addEventListener('DOMContentLoaded', function () {
            showRoomContent(currentRoom);
    
            // Event listener for filter input in Room 201
            const searchInput201 = document.getElementById('searchInput201');
            searchInput201.addEventListener('input', function () {
                const filterText = this.value.trim();
                console.log('Filter text for Room 201:', filterText);
                fetchData(1, itemsPerPage, filterText, '201');
            });
    
            // Event listener for filter input in Room 202
            const searchInput202 = document.getElementById('searchInput202');
            searchInput202.addEventListener('input', function () {
                const filterText = this.value.trim();
                console.log('Filter text for Room 202:', filterText);
                fetchData(1, itemsPerPage, filterText, '202');
            });
        });
    
        async function showModalWithData(row) {
    try {
        const response = await fetch('/data/dBoard' + currentRoom);
        if (!response.ok) {
            throw new Error(`Failed to fetch data. Status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Fetched data:', data);

        // Get modal element for current room
        const modal = document.getElementById('exampleModal' + currentRoom);
        if (!modal) {
            throw new Error('Modal element not found');
        }

        // Set modal title
        modal.querySelector('.modal-title').textContent = 'Row Details';
        // Get modal body container
        const modalBody = modal.querySelector('.modal-body');
        // Clear existing data
        modalBody.innerHTML = '';

        // Find the index of the row in the fetched data
        const rowIndex = Array.from(row.parentNode.children).indexOf(row);
        const rowData = data[rowIndex];

        // Custom field names
        const fieldNames = {
            "room": "Room",
            "location": "Location",
            "category": "Category",
            "item_description": "Item Description",
            "property_number": "Property Number",
            "serial_number": "Serial Number",
            "unit_cost": "Unit Cost",
            "rdf_number": "RDF Number",
            "rtf_number": "Rtf Number",
            "asset_status": "Status",
            "accountability": "Accountability",
            "action": "Action",
            "barcode": "Barcode"
        };

        // Assuming data is the array containing table row data
        const dataList = document.createElement('ul');
        dataList.classList.add('list-group');

        // Iterate over the row data and create list items
        for (const [key, value] of Object.entries(rowData)) {
            // Skip _id field
            if (key === '_id') continue;
            const customFieldName = fieldNames[key] || key;
            const listItem = document.createElement('li');
            listItem.classList.add('list-group-item');
            listItem.innerHTML = `<strong>${customFieldName}:</strong> ${value}`;
            dataList.appendChild(listItem);
        }

        // Append the list to the modal body
        modalBody.appendChild(dataList);

        // Show modal
        $(modal).modal('show');
        
        // Close modal without switching tabs when modal is closed
        $(modal).on('hidden.bs.modal', function () {
            showRoomContent(currentRoom);
        });
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}


    
        document.addEventListener('DOMContentLoaded', function () {
            const tableRows = document.querySelectorAll('#data-table' + currentRoom + ' tr');
    
            // Add click event listener to each table row
            tableRows.forEach(row => {
                row.addEventListener('click', function () {
                    showModalWithData(row);
                });
            });
        });
    
        function printAssetTable(room) {
        // Fetch data from the server based on the specified room
        fetch('/data/dBoard' + room)
            .then(response => response.json())
            .then(data => {
                // Prepare CSV content
                const csvContent = [
                    'Room,Location,Category,Item Description,Serial Number,Unit Cost,Asset Status'
                ];

                data.forEach(item => {
                    const rowData = [
                        item.room,
                        item.location,
                        item.category,
                        item.item_description,
                        item.serial_number,
                        item.unit_cost,
                        item.asset_status
                    ];
                    const csvRow = rowData.map(value => `"${value}"`).join(',');
                    csvContent.push(csvRow);
                });

                const csvString = csvContent.join('\n');

                // Create a Blob containing the CSV data
                const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });

                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                if (link.download !== undefined) { // Check browser support for download attribute
                    const url = URL.createObjectURL(blob);
                    link.setAttribute('href', url);
                    link.setAttribute('download', `asset_table_${room}.csv`);
                    link.style.visibility = 'hidden';
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                } else {
                    console.error('File download is not supported in this browser.');
                }
            })
            .catch(error => console.error('Error fetching data:', error));
    }

    document.addEventListener('DOMContentLoaded', function () {
        // Attach event listeners to the "Print Table" buttons for both rooms
        const printButton201 = document.querySelector('#asset-content201 .print-table');
        const printButton202 = document.querySelector('#asset-content202 .print-table');

        printButton201.addEventListener('click', function () {
            printAssetTable('201');
        });

        printButton202.addEventListener('click', function () {
            printAssetTable('202');
        });
    });



        function showBorrowerContent() {
    hideAllTabs(); // Hide all other tabs
    const borrowerContent = document.getElementById('borrower-content');
    borrowerContent.style.display = 'block';

    // Fetch and populate the borrower table with data from the database
    fetch('/assets') // Replace this with your backend route to fetch borrower data
        .then(response => {
            if (!response.ok) {
                throw new Error(`Failed to fetch data. Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const borrowerTableBody = document.getElementById('borrower-data-table');
            borrowerTableBody.innerHTML = ''; // Clear existing data

            data.forEach(item => {
                const row = document.createElement('tr');

                const shouldHide = isHidden(item.isDeleted); // Use isDeleted field directly

                row.style.display = shouldHide ? 'none' : 'table-row'; // Hide if asset is hidden

                row.innerHTML = `
                    <td>${item.name}</td>
                    <td>${item.email}</td>
                    <td>${item.usernum}</td>
                    <td>${item.item_description}</td>
                    <td>${item.barcode}</td>
                    <td>${item.borrow_date}</td>
                    <td>${item.return_date}</td>
                    <td>${item.status}</td>
                `;
                borrowerTableBody.appendChild(row);
            });
        })
        .catch(error => {
            console.error("Error fetching assets:", error);
        });
}

function isHidden(isDeleted) { // FOR BORROWER
    return !isDeleted;
}
    
function showReportContent() {
    hideAllTabs(); // Hide all other tabs

    const reportContent = document.getElementById('report-content');
    reportContent.style.display = 'block';

    fetch('/indexfacultyreportinputdata')
        .then(response => {
            if (!response.ok) {
                throw new Error(`Failed to fetch data. Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const reportTableBody = document.getElementById('report-data-table');
            reportTableBody.innerHTML = ''; // Clear existing data

            data.forEach(item => {
                const row = document.createElement('tr');
                const shouldHide = isReportHidden(item.isDeleted); // Use isDeleted field directly
                row.style.display = shouldHide ? 'none' : 'table-row'; // Hide if report is hidden
                row.innerHTML = `
                    <td>${item.report_location}</td>
                    <td>${item.report_barcode}</td>
                    <td>${item.report_item_description}</td>
                    <td class="issue" data-status="${item.barcode}">${item.report_issue}</td>
                `;
                reportTableBody.appendChild(row);
            });
        })
        .catch(error => {
            console.error('Error fetching report data:', error);
        });
}
function isReportHidden(isDeleted) { // FOR ASSET CONDITION
    return !isDeleted; 
}

showAuthUsers()

function downloadBorrowerData() {
        fetch('/assets') // Replace with your backend route to fetch borrower data
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Failed to fetch data. Status: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                // Prepare CSV content
                const csvContent = [
                    'Name,Email,User Number,Item Description,Barcode,Borrow Date,Return Date,Status'
                ];

                data.forEach(item => {
                    const rowData = [
                        item.name,
                        item.email,
                        item.usernum,
                        item.item_description,
                        item.barcode,
                        item.borrow_date,
                        item.return_date,
                        item.status
                    ];
                    const csvRow = rowData.map(value => `"${value}"`).join(',');
                    csvContent.push(csvRow);
                });

                const csvString = csvContent.join('\n');

                // Create a Blob containing the CSV data
                const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });

                // Create a temporary anchor element to trigger the download
                const link = document.createElement('a');
                link.setAttribute('href', URL.createObjectURL(blob));
                link.setAttribute('download', 'borrower_data.csv');
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            })
            .catch(error => {
                console.error("Error fetching assets:", error);
            });
    }


    function downloadAssetStatusData() {
    fetch('/indexfacultyreportinputdata')
        .then(response => {
            if (!response.ok) {
                throw new Error(`Failed to fetch data. Status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            const csvContent = [
                'Location,Barcode,Item Description,Issue'
            ];

            data.forEach(item => {
                const rowData = [
                    item.report_location,
                    item.report_barcode,
                    item.report_item_description,
                    item.report_issue
                ];
                const csvRow = rowData.map(value => `"${value}"`).join(',');
                csvContent.push(csvRow);
            });

            const csvString = csvContent.join('\n');

            const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
            const link = document.createElement('a');

            if (link.download !== undefined) {
                const url = URL.createObjectURL(blob);
                link.setAttribute('href', url);
                link.setAttribute('download', 'asset_status_data.csv');
                link.style.visibility = 'hidden';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
            } else {
                console.error('File download is not supported in this browser.');
            }
        })
        .catch(error => {
            console.error('Error fetching report data:', error);
        });
}








    </script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
</body>
</html>