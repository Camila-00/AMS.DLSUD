<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="./assets/DLSUDLOGO.png" type="image/x-icon">
    <title>ICTC Asset Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/paginationjs/2.6.0/pagination.css"
    integrity="sha512-TH+vnrhByFI2RzNvaHSqt6EwoJ9Bp+yGAGTWp84qTuTx315ebnypxtyGHpli55Rm4N4J+N/0W9xAL2b5RZ2ZSA=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/6.0.0/bootbox.js"></script>
   <style>
.update-button {
        background-color: transparent;
        color: #1db954; /* Green */
        border: 2px solid transparent;
        border-radius: 4px;
        padding: 8px 16px;
        cursor: pointer;
        margin-right: 5px;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }

    .update-button:hover {
        background-color: #28a745; /* Green */
        color: #fff; /* White text color on hover */
        border-color: #28a745; /* Green border on hover */
    }

    /* Navbar styling */
    .navbar {
        background-color: #f8f9fa; /* Change to desired color */
        z-index: 1000; /* Ensure it stays on top */
    }

    .navbar-brand {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .dropdown-menu {
        background-color: #f8f9fa; /* Change to desired color */
    }

    
    #asset-content202 table {
        width: 99%;
        max-width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        margin-left: 5px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        overflow-x: auto; /* Allow horizontal scroll */
        animation: fadeIn 0.5s ease-in-out;
    }

    #asset-content202 h1 { 
        margin-left: 10px;
    }

    #asset-content202 th,
    #asset-content202 td {
        padding: 10px;
        text-align: left;
        border-bottom: 1px solid #ddd;
        font-size: 15px;
    }

    #asset-content202 th {
        background-color: #f2f2f2;
    }

    #searchInput202 {
        margin-left: 10px; /* Adjust as needed */
    }

    .print-table { 
        background-color: #1db954; /* Same green color as the Print Table button */
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-left: 5px;    
    }

    .print-table:hover {
        background-color: #116e30; /* Darker green on hover */
    }

    #welcomeText {
        font-weight: bold;
    }

    #authUsers {
        text-transform: capitalize; /* Capitalize the first letter of the username */
    }

    /* Pagination styling */
    #pagination {
        display: block;
            width: 440px;
            margin: 10px auto;
            align-content: center;
    }

    #pagination a {
        display: inline-block;
        padding: 5px 10px;
        margin-right: 5px;
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        text-decoration: none;
        color: #333;
    }

    #pagination a.active {
        background-color: #00a100;
        color: #fff;
    }

    .pagination a:hover:not(.active) {
        background-color: #ddd;
    }

    .content h1 {
            font-family: 'Montserrat', sans-serif;
            
        }
        #searchInput202 {
        width: 445px; /* Adjusted width to accommodate the print button */
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

    #searchInput202:focus {
        outline: none;
        border-color: #087830;
    }

    #searchInput202::placeholder {
        color: #aaa;
    }

    /* Modal Styles */
    .modal-content {
        border-radius: 10px;
    }

    .modal-header {
        background-color: #1db954;
        color: #fff;
        border-radius: 10px 10px 0 0;
    }

    .modal-footer {
        border-radius: 0 0 10px 10px;
    }

    /* Animation */
    @keyframes modalFadeIn {
        from {
            opacity: 0;
            transform: translateY(-50%);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @keyframes modalFadeOut {
        from {
            opacity: 1;
            transform: translateY(0);
        }

        to {
            opacity: 0;
            transform: translateY(-50%);
        }
    }

 /* Select Styles */
 #asset_status {
        width: 100%;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        background-color: #f8f9fa;
        transition: border-color 0.3s ease;
    }

    #asset_status:focus {
        outline: none;
        border-color: #00c600;
    }
#updateStatusBtn {
    background-color: #1db954;
}

.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.controls-container {
    display: flex;
    align-items: center; /* Align items vertically in the center */
}

.controls {
    display: flex;
    align-items: center; /* Align items to the center */
}

#assetcount202 {
    display: flex;
    flex-direction: column; /* Arrange child elements in a column */
    align-items: center; /* Center items horizontally */
    font-size: 18px; /* Adjust font size as needed */
    font-weight: bold; /* Make the text bold */
    color: #ffffff; /* Set text color */
    margin-left: 10px; /* Add some margin to separate it from other controls */
    margin-top: 5px;
}



.main-content {
    display: flex;
    flex-direction: column;
    width: 100%;
}

.asset-summary-container {
    background-color: #333333;; /* Gray background */
    float: right; /* Align to the right */
    padding: 10px; /* Add padding for spacing */
    margin-top: -20px;
    margin-left: 775px; /* Adjust margin-left as needed */
    border-radius: 10px; /* Rounded borders */
    color: white; /* White text */
}


   </style>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap">
</head>
<body>

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="indexcustodianhomepage.ejs">
            ICTC Asset Management
        </a>
        <ul class="navbar-nav ml-auto">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span id="welcomeText">Welcome, </span><span id="authUsers">Admin</span>
                </a>
                <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                    <a class="dropdown-item" href="indexwelcomepage.ejs">Logout</a>
                </div>
            </li>
        </ul>
    </div>
</nav>

<!-- Asset content -->
<div class="content" id="asset-content202">
    <div class="header">
        <h1>ICTC 202 Asset Table</h1>
    </div>
    <div class="controls-container">
        <div class="controls">
            <input type="text" id="searchInput202" placeholder="Filter">
            <button class="print-table">Print Table</button>
        </div>
        <div class="asset-summary-container">
            <div id="assetcount202" class="borrowers-counter">
                <!-- Asset Count will be populated here -->
            </div>
            <p>Total Asset Room 202</p>
        </div>
    </div>
    <div class="main-content">
        <table>
            <thead>
                <tr>                   
                    <th>Room</th>
                    <th>Location</th>
                    <th>Category</th>
                    <th>Item Description</th>
                    <th>Serial Number</th>
                    <th>Unit Cost</th>
                    <th>Status</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody id="data-table">
            </tbody>
        </table>
    </div>
    <!-- Pagination HTML -->
    <div id="pagination"></div>
</div>






<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Row Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- Row details will be populated here -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
  

<!-- Modal -->
<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel">Update Status</h5>
                <!-- Close button (x) -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label for="asset_status" class="form-label">Asset Status:</label>
                    <input type="text" class="form-control" id="asset_status">
                </div>
                
                <!-- New input fields -->
                <div class="mb-3">
                    <label for="rdf_input" class="form-label">RDF Number:</label>
                    <input type="text" class="form-control" id="rdf_input">
                </div>
                <div class="mb-3">
                    <label for="rtf_input" class="form-label">RTF Number:</label>
                    <input type="text" class="form-control" id="rtf_input">
                </div>
                <div class="mb-3">
                    <label for="rtf_input" class="form-label">Room:</label>
                    <input type="text" class="form-control" id="room_input">
                </div>
                    <div class="mb-3">
                        <label for="rtf_input" class="form-label">Location:</label>
                        <input type="text" class="form-control" id="location_input">
                    </div>
                    <div class="mb-3">
                        <label for="rtf_input" class="form-label">Category:</label>
                        <input type="text" class="form-control" id="category_input">
                    </div>
                    <div class="mb-3">
                        <label for="rtf_input" class="form-label">Item Description:</label>
                        <input type="text" class="form-control" id="item_description_input">
                    </div>
                    <div class="mb-3">
                        <label for="rtf_input" class="form-label">Property Number:</label>
                        <input type="text" class="form-control" id="property_number_input">
                    </div>
                    <div class="mb-3">
                        <label for="rtf_input" class="form-label">Unit Cost:</label>
                        <input type="text" class="form-control" id="unit_cost_input">
                    </div>
                    <div class="mb-3">
                        <label for="rtf_input" class="form-label">Accountability:</label>
                        <input type="text" class="form-control" id="accountability_input">
                    </div>
                    <div class="mb-3">
                        <label for="rtf_input" class="form-label">Barcode:</label>
                        <input type="text" class="form-control" id="barcode_input">
                    </div>
                </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" id="updateStatusBtn">Update Status</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>



    <!-- Bootstrap JS and jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<!-- Bootbox JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/6.0.0/bootbox.js"></script>

<script>
// Define an object to store the previous data for each row
let previousData = {};

async function showAuthUsers() {
        let usersName = document.getElementById("authUsers");
        usersName.innerText = await localStorage.getItem('lastName');
    }


function borrowercount() {
        fetch('/assetcount202')
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Failed to fetch report data. Status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                document.getElementById('assetcount202').innerHTML = result.count202;
            })
            .catch(error => {
                console.error('Error fetching report data:', error);
            });
    }

    // Call borrowercount function when the page loads
    window.onload = borrowercount;

let updatedAsset; // Define updatedAsset at a higher scope

document.addEventListener('DOMContentLoaded', function () {

    // Event listener for filter input
    const searchInput = document.getElementById('searchInput202');
    searchInput.addEventListener('input', function () {
        const filterText = this.value.trim();
        console.log('Filter text:', filterText); // Log filter text
        fetchData(1, itemsPerPage, filterText);
    });

    async function showModalWithData(row) {
    try {
        const response = await fetch('/data/dBoard202');
        if (!response.ok) {
            throw new Error(`Failed to fetch data. Status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Fetched data:', data);

        // Get modal element
        const modal = document.getElementById('exampleModal');
        if (!modal) {
            throw new Error('Modal element not found');
        }

        // Set modal title
        modal.querySelector('.modal-title').textContent = 'Row Details';
        // Get modal body container
        const modalBody = modal.querySelector('.modal-body');
        // Clear existing data
        modalBody.innerHTML = '';

        // Find the index of the row in the fetched data
        const rowIndex = Array.from(row.parentNode.children).indexOf(row);
        const rowData = data[rowIndex];

        // Custom field names
        const fieldNames = {
            "room": "Room",
            "location": "Location",
            "category": "Category",
            "item_description": "Item Description",
            "property_number": "Property Number",
            "serial_number": "Serial Number",
            "unit_cost": "Unit Cost",
            "rdf_number": "RDF Number",
            "rtf_number": "RTF Number",
            "asset_status": "Status",
            "accountability": "Accountability",
            "action": "Action",
            "barcode": "Barcode"
        };

        // Assuming data is the array containing table row data
        const dataList = document.createElement('ul');
        dataList.classList.add('list-group');

        // Iterate over the row data and create list items
        for (const [key, value] of Object.entries(rowData)) {
            // Skip _id field
            if (key === '_id') continue;
            const customFieldName = fieldNames[key] || key;
            const listItem = document.createElement('li');
            listItem.classList.add('list-group-item');
            listItem.innerHTML = `<strong>${customFieldName}:</strong> ${value}`;
            dataList.appendChild(listItem);
        }

        // Append the list to the modal body
        modalBody.appendChild(dataList);

        // Show modal
        $(modal).modal('show');
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}

document.addEventListener('DOMContentLoaded', function () {
    const tableRows = document.querySelectorAll('#data-table tr');

    // Add click event listener to each table row
    tableRows.forEach(row => {
        row.addEventListener('click', function () {
            showModalWithData(row);
        });
    });
});


    async function fetchData(pageNumber, itemsPerPage, filterText = '') {
        try {
            const response = await fetch('/data/dBoard202');
            if (!response.ok) {
                throw new Error(`Failed to fetch data. Status: ${response.status}`);
            }
            const data = await response.json();
            console.log('Fetched data:', data);

            // Filter data based on input text
            const filteredData = data.filter(item => {
                const searchableFields = ['room', 'location', 'category', 'item_description', 'serial_number', 'unit_cost', 'asset_status'];
                const isMatch = searchableFields.some(field => {
                    const fieldValue = item[field];
                    if (typeof fieldValue === 'string') {
                        const lowercaseValue = fieldValue.toLowerCase();
                        console.log(`Field: ${field}, Value: ${lowercaseValue}`);
                        return lowercaseValue.includes(filterText.toLowerCase());
                    }
                    return false;
                });
                console.log('Is Match:', isMatch);
                return isMatch;
            });

            const startIndex = (pageNumber - 1) * itemsPerPage;
            const endIndex = Math.min(startIndex + itemsPerPage, filteredData.length);
            const currentPageData = filteredData.slice(startIndex, endIndex);

            populatePage(currentPageData);
            createPagination(filteredData.length, itemsPerPage, pageNumber);

        } catch (error) {
            console.error('Error fetching data:', error);
        }
    }

    function populatePage(assetsList){
        const tableBody = document.getElementById('data-table');
        tableBody.innerHTML = ''; // Clear existing data

        assetsList.forEach(item => {
            const row = document.createElement('tr');
            row.innerHTML = `
                <td>${item.room}</td>
                <td>${item.location}</td>
                <td>${item.category}</td>
                <td>${item.item_description}</td>
                <td>${item.serial_number}</td>
                <td>${item.unit_cost}</td>
                <td>${item.asset_status}</td>
                <td>
                    <button class="update-button">Update</button>
                </td>
            `;

            // Add click event listener to the row
            row.addEventListener('click', function () {
                showModalWithData(row);
            });

            // Add click event listener to the update button
            const updateButton = row.querySelector('.update-button');
            updateButton.addEventListener('click', function (event) {
                event.stopPropagation(); // Prevent row click event from firing

                // Show modal
                $('#updateModal').modal('show');

//FOR UPDATE OF THE TABLE DATA

// Define an object to store the previous data for each row
const previousData = {};


document.getElementById('updateStatusBtn').addEventListener('click', function () {
  // Assuming 'item' is the row being updated
  const serialNumber = item.serial_number; // Ensure this references the correct row's serial number

  // Get all input values
  const assetStatusValue = document.getElementById('asset_status').value;
  const rdfValue = document.getElementById('rdf_input').value;
  const rtfValue = document.getElementById('rtf_input').value;
  const roomValue = document.getElementById('room_input').value;
  const locValue = document.getElementById('location_input').value;
  const catvalue = document.getElementById('category_input').value;
  const itemdescValue = document.getElementById('item_description_input').value;
  const propValue = document.getElementById('property_number_input').value;
  const unitValue = document.getElementById('unit_cost_input').value;
  const accountValue = document.getElementById('accountability_input').value;
  const barValue = document.getElementById('barcode_input').value;


  // Define the data object to be sent to the backend
const data = {
asset_status: assetStatusValue, // Add asset_status to the data object
  rdf_number: rdfValue,
  rtf_number: rtfValue,
  room: roomValue,
  location: locValue,
  category: catvalue,
  item_description: itemdescValue,
  property_number: propValue,
  unit_cost: unitValue,
  accountability: accountValue,
  barcode: barValue,
};


  // Send data to backend endpoint for updating all fields
  fetch(`/assetsupdate/dBoard202/${serialNumber}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(data)
  })
  .then(response => response.json())
  .then(data => {
    console.log(data.message); // Log the server response
    // Optionally, you can handle success response here
  })
  .catch(error => {
    console.error('Error updating:', error);
    // Optionally, you can handle error here
  });
});

            });
            showAuthUsers();
            tableBody.appendChild(row);
        });
    }

//FOR UPDATE OF THE TABLE DATA - END

// Add an event listener to the modal to clear fields when it is shown
$('#updateModal').on('show.bs.modal', function (event) {// Clear input fields in the modal
    document.getElementById('rdf_input').value = '';
    document.getElementById('rtf_input').value = '';
    document.getElementById('room_input').value = '';
    document.getElementById('location_input').value = '';
    document.getElementById('category_input').value = '';
    document.getElementById('item_description_input').value = '';
    document.getElementById('property_number_input').value = '';
    document.getElementById('unit_cost_input').value = '';
    document.getElementById('accountability_input').value = '';
    document.getElementById('barcode_input').value = '';
});


    function createPagination(totalItems, itemsPerPage, currentPage) {
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        for (let i = 1; i <= totalPages; i++) {
            const pageLink = document.createElement('a');
            pageLink.href = '#';
            pageLink.textContent = i;
            if (i === currentPage) {
                pageLink.classList.add('active');
            }
            pageLink.addEventListener('click', function () {
                fetchData(i, itemsPerPage);
            });
            pagination.appendChild(pageLink);
        }
    }

    const itemsPerPage = 10;
    fetchData(1, itemsPerPage);





function printAssetTable() {
            // Fetch data from the server
            fetch('/data/dBoard202')
                .then(response => response.json())
.then(data => {
                    const tableData = [];
                    // Assuming data is an array of objects, each representing a row in the table
                    // Define the desired order of columns and their respective labels
                    const columnLabels = {
                        "room": "Room",
                        "location": "Location",
                        "category": "Category",
                        "item_description": "Item Description",
                        "property_number": "Property Number",
                        "serial_number": "Serial Number",
                        "unit_cost": "Unit Cost",
                        "rdf_number": "RDF Number",
                        "rtf_number": "RTF Number",
                        "asset_status": "Status",
                        "accountability": "Accountability",
                        "barcode": "Barcode"
                    };
                    const headers = Object.keys(columnLabels);
                    tableData.push(headers.map(header => columnLabels[header]).join(','));

                    // Extracting rows
                    data.forEach(row => {
                        const rowData = [];
                        headers.forEach(header => {
                            rowData.push(`"${row[header] || ''}"`);
                        });
                        tableData.push(rowData.join(','));
                    });

                    // Download CSV
                    downloadCSV('asset_data_Room202.csv', tableData);
                })
                .catch(error => {
                    console.error('Error fetching data:', error);
                });
        }
        function downloadCSV(filename, data) {
    const csv = data.join('\n');
    const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });

    if (navigator.msSaveBlob) { // IE 10+
        navigator.msSaveBlob(blob, filename);
    } else {
        const link = document.createElement('a');
        if (link.download !== undefined) { // Feature detection
            const url = URL.createObjectURL(blob);
            link.setAttribute('href', url);
            link.setAttribute('download', filename);
            link.style.visibility = 'hidden';
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
        }
    }
}

        // Add event listener to the button
        document.querySelector('.print-table').addEventListener('click', printAssetTable);
    });


    </script>

</body>
</html>