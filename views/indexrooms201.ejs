<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ICTC Asset Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/paginationjs/2.6.0/pagination.css"
    integrity="sha512-TH+vnrhByFI2RzNvaHSqt6EwoJ9Bp+yGAGTWp84qTuTx315ebnypxtyGHpli55Rm4N4J+N/0W9xAL2b5RZ2ZSA=="
    crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/6.0.0/bootbox.js"></script>
   <style>

.update-button {
        background-color: transparent;
        color: #28a745; /* Green */
        border: 2px solid transparent;
        border-radius: 4px;
        padding: 8px 16px;
        cursor: pointer;
        margin-right: 5px;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }

    .update-button:hover {
        background-color: #28a745; /* Green */
        color: #fff; /* White text color on hover */
        border-color: #28a745; /* Green border on hover */
    }

    .delete-button {
        background-color: transparent;
        color: #dc3545; /* Red */
        border: 2px solid transparent;
        border-radius: 4px;
        padding: 8px 16px;
        cursor: pointer;
        transition: background-color 0.3s ease, color 0.3s ease, border-color 0.3s ease;
    }

    .delete-button:hover {
        background-color: #dc3545; /* Red */
        color: #fff; /* White text color on hover */
        border-color: #dc3545; /* Red border on hover */
    }
    /* Navbar styling */
    .navbar {
        background-color: #f8f9fa; /* Change to desired color */
        z-index: 1000; /* Ensure it stays on top */
    }

    .navbar-brand {
        font-size: 1.5rem;
        font-weight: bold;
    }

    .dropdown-menu {
        background-color: #f8f9fa; /* Change to desired color */
    }

    
    #asset-content201 table {
        width: 99%;
        max-width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
        margin-left: 5px;
        box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
        overflow-x: auto; /* Allow horizontal scroll */
        animation: fadeIn 0.5s ease-in-out;
    }

    #asset-content201 h1 { 
        margin-left: 10px;
    }

    #asset-content201 th,
    #asset-content201 td {
        padding: 10px;
        text-align: left;
        border-bottom: 1px solid #ddd;
        font-size: 15px;
    }

    #asset-content201 th {
        background-color: #f2f2f2;
    }

    #searchInput201 {
        margin-left: 10px; /* Adjust as needed */
    }

    .print-table { 
        background-color: #1db954; /* Same green color as the Print Table button */
        color: #fff;
        border: none;
        border-radius: 5px;
        padding: 10px 15px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-left: 5px;    
    }

    .print-table:hover {
        background-color: #14843a; /* Darker green on hover */
    }

    #welcomeText {
        font-weight: bold;
    }

    #authUsers {
        text-transform: capitalize; /* Capitalize the first letter of the username */
    }

    /* Pagination styling */
    #pagination {
        display: block;
            width: 440px;
            margin: 10px auto;
            align-content: center;
    }

    #pagination a {
        display: inline-block;
        padding: 5px 10px;
        margin-right: 5px;
        background-color: #f8f9fa;
        border: 1px solid #ccc;
        text-decoration: none;
        color: #333;
    }

    #pagination a.active {
        background-color: #00a100;
        color: #fff;
    }

    .pagination a:hover:not(.active) {
        background-color: #ddd;
    }

    .content h1 {
            font-family: 'Montserrat', sans-serif;
            
        }
        #searchInput201 {
        width: 445px; /* Adjusted width to accommodate the print button */
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        transition: border-color 0.3s ease;
    }

    #searchInput201:focus {
        outline: none;
        border-color: #087830;
    }

    #searchInput201::placeholder {
        color: #aaa;
    }

   </style>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/5.5.2/bootbox.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap">
</head>
<body>

<!-- Navbar -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container-fluid">
        <a class="navbar-brand" href="indexcustodianhomepage.ejs">
            ICTC Asset Management
        </a>
        <ul class="navbar-nav ml-auto">
            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <span id="welcomeText">Welcome, </span><span id="authUsers">Admin</span>
                </a>
                <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                    <a class="dropdown-item" href="indexwelcomepage.ejs">Logout</a>
                </div>
            </li>
        </ul>
    </div>
</nav>


<!-- Asset content -->
<div class="content" id="asset-content201">
    <h1>ICTC 201 Asset Table</h1>
    <input type="text" id="searchInput201" placeholder="Filter">
    <button class="print-table">Print Table</button>

    <table>
        <thead>
            <tr>                   
                <th>Room</th>
                <th>Location</th>
                <th>Category</th>
                <th>Item Description</th>
                <th>Serial Number</th>
                <th>Unit Cost</th>
                <th>Status</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody id="data-table">
        </tbody>
    </table>

    <!-- Pagination HTML -->
    <div id="pagination"></div>
</div>

 <!-- Modal -->
 <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Row Details</h5>
                <!-- Close button (x) -->
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Modal content will be filled dynamically -->
            </div>
        </div>
    </div>
</div>
      <!-- Modal for soft deletion -->
<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Deletion</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure you want to delete this item?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>


    <!-- Bootstrap JS and jQuery -->
<script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

<!-- Bootbox JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/bootbox.js/6.0.0/bootbox.js"></script>

<script>



    document.addEventListener('DOMContentLoaded', function () {

       // Event listener for filter input
    const searchInput = document.getElementById('searchInput201');
    searchInput.addEventListener('input', function () {
        const filterText = this.value.trim();
        console.log('Filter text:', filterText); // Log filter text
        fetchData(1, itemsPerPage, filterText);
    });

        // Define showModalWithData globally
        async function showModalWithData(row) {
            try {
                const response = await fetch('/data/dBoard201');
                if (!response.ok) {
                    throw new Error(`Failed to fetch data. Status: ${response.status}`);
                }
                const data = await response.json();
                console.log('Fetched data:', data);
    
                // Get modal element
                const modal = document.getElementById('exampleModal');
                // Set modal title
                modal.querySelector('.modal-title').textContent = 'Row Details';
                // Get modal body container
                const modalBody = modal.querySelector('.modal-body');
                // Clear existing data
                modalBody.innerHTML = '';
    
                // Find the index of the row in the fetched data
                const rowIndex = Array.from(row.parentNode.children).indexOf(row);
                const rowData = data[rowIndex];
    
                // Custom field names
                const fieldNames = {
                    "room": "Room",
                    "location": "Location",
                    "category": "Category",
                    "item_description": "Item Description",
                    "property_number": "Property Number",
                    "serial_number": "Serial Number",
                    "unit_cost": "Unit Cost",
                    "rdf_number": "RDF Number",
                    "rtf_number": "Rtf Number",
                    "asset_status": "Status",
                    "accountability": "Accountability",
                    "action": "Action",
                    "barcode": "Barcode"
                };
    
                // Assuming data is the array containing table row data
                const dataList = document.createElement('ul');
                dataList.classList.add('list-group');
    
                // Iterate over the row data and create list items
                for (const [key, value] of Object.entries(rowData)) {
                    // Skip _id field
                    if (key === '_id') continue;
                    const customFieldName = fieldNames[key] || key;
                    const listItem = document.createElement('li');
                    listItem.classList.add('list-group-item');
                    listItem.innerHTML = `<strong>${customFieldName}:</strong> ${value}`;
                    dataList.appendChild(listItem);
                }
    
                // Append the list to the modal body
                modalBody.appendChild(dataList);
    
                // Show modal
                $(modal).modal('show');
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }
    
        async function fetchData(pageNumber, itemsPerPage, filterText = '') {
    try {
        const response = await fetch('/data/dBoard201');
        if (!response.ok) {
            throw new Error(`Failed to fetch data. Status: ${response.status}`);
        }
        const data = await response.json();
        console.log('Fetched data:', data);

        // Filter data based on input text
        const filteredData = data.filter(item => {
            const searchableFields = ['room', 'location', 'category', 'item_description', 'serial_number','unit_cost', 'asset_status'];
            const isMatch = searchableFields.some(field => {
                const fieldValue = item[field];
                if (typeof fieldValue === 'string') {
                    const lowercaseValue = fieldValue.toLowerCase();
                    console.log(`Field: ${field}, Value: ${lowercaseValue}`);
                    return lowercaseValue.includes(filterText.toLowerCase());
                }
                return false;
            });
            console.log('Is Match:', isMatch);
            return isMatch;
        });

        const startIndex = (pageNumber - 1) * itemsPerPage;
        const endIndex = Math.min(startIndex + itemsPerPage, filteredData.length);
        const currentPageData = filteredData.slice(startIndex, endIndex);

        populatePage(currentPageData);
        createPagination(filteredData.length, itemsPerPage, pageNumber);

    } catch (error) {
        console.error('Error fetching data:', error);
    }
}


    
        function populatePage(assetsList) {
            const tableBody = document.getElementById('data-table');
            tableBody.innerHTML = ''; // Clear existing data
    
            assetsList.forEach(item => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${item.room}</td>
                    <td>${item.location}</td>
                    <td>${item.category}</td>
                    <td>${item.item_description}</td>
                    <td>${item.serial_number}</td>
                    <td>${item.unit_cost}</td>
                    <td>${item.asset_status}</td>
                    <td>
                        <button class="update-button">Update</button>
                        <button class="delete-button">Delete</button>
                    </td>
                `;
    
                // Add click event listener to the row
                row.addEventListener('click', function () {
                    showModalWithData(row);
                });
    
                // Add click event listener to the update button
                const updateButton = row.querySelector('.update-button');
                updateButton.addEventListener('click', function (event) {
                    event.stopPropagation(); // Prevent row click event from firing
                    const statusCell = row.querySelector('td:nth-child(7)');
                    const currentStatus = statusCell.textContent.trim(); // Get the current status
    
 // Create custom modal HTML
const modalHTML = `
    <div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Update Status</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <select id="statusSelect" class="form-control">
                        <option value="Good/Instock">Good/Instock</option>
                        <option value="Good/Not Instock">Good/Not Instock</option>
                        <option value="Not Working">Not Working</option>
                    </select>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="updateStatusBtn">Save changes</button>
                </div>
            </div>
        </div>
    </div>
`;

// Append the modal HTML to the document body
document.body.insertAdjacentHTML('beforeend', modalHTML);

// Show the modal
$('#updateModal').modal('show');

// Add event listener to close button (x)
document.querySelector('#updateModal .close').addEventListener('click', () => {
    $('#updateModal').modal('hide');
});

// Add event listener to close button (Close)
document.querySelector('#updateModal .btn-secondary').addEventListener('click', () => {
    $('#updateModal').modal('hide');
});


// Add event listener to modal hidden event
$('#updateModal').on('hidden.bs.modal', function () {
    // Do something when modal is hidden
});

// Add event listener to the update status button
document.getElementById('updateStatusBtn').addEventListener('click', function () {
    const selectedStatus = document.getElementById('statusSelect').value;
    statusCell.textContent = selectedStatus;
    $('#updateModal').modal('hide');

    // Here you can include logic to update the status in your backend or wherever it's stored
    console.log("Selected:", selectedStatus);
});


                });
    
                // Add click event listener to the delete button
                const deleteButton = row.querySelector('.delete-button');
                deleteButton.addEventListener('click', function (event) {
                    event.stopPropagation(); // Prevent row click event from firing
    
                    // Create custom modal HTML for soft deletion
                    const modalHTML = `
                        <div class="modal fade" id="softDeleteModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="exampleModalLabel">Confirm Soft Deletion</h5>
                                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                            <span aria-hidden="true">&times;</span>
                                        </button>
                                    </div>
                                    <div class="modal-body">
                                        Are you sure you want to soft delete this item?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                                        <button type="button" class="btn btn-danger" id="confirmSoftDeleteBtn">Soft Delete</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
    
                    // Append the modal HTML to the document body
                    document.body.insertAdjacentHTML('beforeend', modalHTML);
    
                    // Show the modal
                    $('#softDeleteModal').modal('show');
    
                    // Add event listener to close button
                    document.querySelector('#softDeleteModal .close').addEventListener('click', () => {
                        $('#softDeleteModal').modal('hide');
                    });
    
                    // Add event listener to cancel button
                    document.querySelector('#softDeleteModal .btn-secondary').addEventListener('click', () => {
                        $('#softDeleteModal').modal('hide');
                    });
    
                    // Add event listener to soft delete button
                    document.getElementById('confirmSoftDeleteBtn').addEventListener('click', function () {
                        // Perform soft delete operation
                        // You can implement your soft delete logic here
                        row.style.display = 'none'; // For demonstration purpose, hiding the row
                        $('#softDeleteModal').modal('hide');
                    });
                });
    
                tableBody.appendChild(row);
            });
        }
    
        function createPagination(totalItems, itemsPerPage, currentPage) {
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const pagination = document.getElementById('pagination');
            pagination.innerHTML = '';
    
            for (let i = 1; i <= totalPages; i++) {
                const pageLink = document.createElement('a');
                pageLink.href = '#';
                pageLink.textContent = i;
                if (i === currentPage) {
                    pageLink.classList.add('active');
                }
                pageLink.addEventListener('click', function () {
                    fetchData(i, itemsPerPage);
                });
                pagination.appendChild(pageLink);
            }
        }
    
        const itemsPerPage = 10;
        fetchData(1, itemsPerPage);
    
    
    });
// Function to download CSV
function downloadCSV(fileName, tableData) {
    const csvContent = tableData.join('\n');
    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);

    const a = document.createElement('a');
    a.href = url;
    a.download = fileName;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
}

// print table button function
function printAssetTable() {
    // Fetch data from the server
    fetch('/data/dBoard201')
        .then(response => response.json())
        .then(data => {
            const tableData = [];
            // Assuming data is an array of objects, each representing a row in the table
            // Define the desired order of columns and their respective labels
            const columnLabels = {
                "room": "Room",
                "location": "Location",
                "category": "Category",
                "item_description": "Item Description",
                "property_number": "Property Number",
                "serial_number": "Serial Number",
                "unit_cost": "Unit Cost",
                "rdf_number": "RDF Number",
                "rtf_number": "Rtf Number",
                "asset_status": "Status",
                "accountability": "Accountability",
                "barcode": "Barcode"
            };
            const headers = Object.keys(columnLabels);
            tableData.push(headers.map(header => columnLabels[header]).join(','));

            // Extracting rows
            data.forEach(row => {
                const rowData = [];
                headers.forEach(header => {
                    rowData.push(`"${row[header] || ''}"`);
                });
                tableData.push(rowData.join(','));
            });

            // Download CSV
            downloadCSV('asset_data.csv', tableData);
        })
        .catch(error => {
            console.error('Error fetching data:', error);
        });
}






// Add event listener to the button
document.querySelector('.print-table').addEventListener('click', printAssetTable);

        
    </script>
    
    
</body>
</html>
